TrelloModules = script:WaitForChild('Trello')
ReplicatedStorage = game:GetService('ReplicatedStorage')
HttpService = game:GetService('HttpService')
DataStoreService = game:GetService('DataStoreService')
Players = game:GetService('Players')
RemoteService = ReplicatedStorage:WaitForChild('RemoteService')
ServerStorage = game:GetService('ServerStorage')
PhysicsService = game:GetService('PhysicsService')
InterpreterService = ReplicatedStorage:WaitForChild('InterpreterService')


TrelloMain = require(TrelloModules.Main)
BreakerModule = require(InterpreterService.BreakerModule)
RaceSizeModule = require(ReplicatedStorage.RaceSizeModule)


Board = TrelloMain:GetBoardByName('GameData')
PlayerDataList = Board:GetListByName('PlayerData')
ServerList = Board:GetListByName('Servers')

ServerCard = TrelloMain.new('Card',game.JobId,ServerList)


function ServerCardF()
	ServerCard:SetProperty('Desc','Players: '..#(game.Players:GetPlayers())..'/nServerAge (Updated on joins and autosaves): '.. workspace.DistributedGameTime)
end
ServerCardF()


game:BindToClose(function()
	ServerCard:Delete()
end)

CharacterSizeAttributes = {'BodyWidthScale','BodyDepthScale','BodyHeightScale','BodyProportionScale','BodyTypeScale','BodyWidthScale','HeadScale'}
Items = ServerStorage:WaitForChild('Items')
MoveModules = ServerStorage:WaitForChild('MoveModules')
CharacterAssets = ServerStorage:WaitForChild('CharacterLoadAssets')
CharacterPresets = CharacterAssets:WaitForChild('CharacterPresets')
Hairs = CharacterAssets.Hairs
FacePresets = CharacterAssets.Faces
Players.PlayerAdded:Connect(function(Player)
	ServerCardF()
	local PlayerData = Instance.new('Folder')
	local IsInGame = Instance.new('BoolValue')
	local ActiveSave = Instance.new('IntValue')
	
	PlayerData.Name = 'PlayerData'
	PlayerData.Parent = Player
	
	IsInGame.Name = 'IsInGame'
	IsInGame.Parent = PlayerData
	IsInGame.Value = false
	
	ActiveSave.Name = 'ActiveSave'
	ActiveSave.Parent = PlayerData
	ActiveSave.Value = 0
	
	for i = 1,3 do
		local SaveFolder = Instance.new('Folder')
		local Strength = Instance.new('IntValue')
		local Magic = Instance.new('IntValue')
		local Spirit = Instance.new('IntValue')
		local Multiplier = Instance.new('NumberValue')
		local Inventory = Instance.new('Folder')
		local PlayTime = Instance.new('IntValue')
		local CharacterData = Instance.new('Folder')
		local Race = Instance.new('StringValue')
		local Moves = Instance.new('Folder')
		local Cash = Instance.new('IntValue')
		
		SaveFolder.Name = 'Save'..i
		SaveFolder.Parent = PlayerData
		
		Magic.Name = 'Magic'
		Magic.Parent = SaveFolder
		Magic.Value = 0
		
		Spirit.Name = 'Spirit'
		Spirit.Parent = SaveFolder
		Spirit.Value = 0
		
		Strength.Name = 'Strength'
		Strength.Parent = SaveFolder
		Strength.Value = 0
		
		Race.Name = 'Race'
		Race.Parent = SaveFolder
		Race.Value = 'NoRace'
		
		Strength.Parent = SaveFolder
		Multiplier.Name = 'Multiplier'
		Multiplier.Parent = SaveFolder
		Multiplier.Value = 1
		
		PlayTime.Name = 'PlayTime'
		PlayTime.Parent = SaveFolder
		PlayTime.Value = 0
		
		Inventory.Name = 'Inventory'
		Inventory.Parent = SaveFolder
		
		CharacterData.Name = 'CharacterData'
		CharacterData.Parent = SaveFolder
		
		Moves.Parent = SaveFolder
		Moves.Name = 'Moves'
		
		Cash.Parent = SaveFolder
		Cash.Name = 'Cash'
		Cash.Value = 0
		
		local SkinColor = Instance.new('BrickColorValue')
		local HairColor = Instance.new('StringValue')
		local Gender = Instance.new('StringValue')
		local Face = Instance.new('IntValue')
		local HairType = Instance.new('IntValue')
		local HasChar = Instance.new('BoolValue')
		
		SkinColor.Name = 'SkinColor'
		SkinColor.Value = BrickColor.new('Nougat')
		SkinColor.Parent = CharacterData
		
		HairColor.Name = 'HairColor'
		HairColor.Value = 'Black'
		HairColor.Parent = CharacterData
		
		Gender.Name = 'Gender'
		Gender.Value = 'Male'
		Gender.Parent = CharacterData
		
		Face.Name = 'Face'
		Face.Value = 1
		Face.Parent = CharacterData
		
		HairType.Name = 'HairType'
		HairType.Value = 1
		HairType.Parent = CharacterData
		
		HasChar.Name = 'HasChar'
		HasChar.Value = false
		HasChar.Parent = CharacterData
		
		local PlayerData 
		local s1 = pcall(function()
			PlayerData = PlayerDataList:GetCardByName(tostring(Player.UserId..':'..i))
		end)
		
		if s1 and PlayerData then
			local DecodedFormat = HttpService:JSONDecode(PlayerData:GetDesc())
			Strength.Value = DecodedFormat['Strength']
			Magic.Value = DecodedFormat['Magic']
			Spirit.Value = DecodedFormat['Spirit']
			Multiplier.Value = DecodedFormat['Multiplier']
			Race.Value = DecodedFormat['Race']
			
			HasChar.Value = true
			SkinColor.Value = DecodedFormat['SkinColor']
			HairType.Value = DecodedFormat['HairType']
			HairColor.Value = DecodedFormat['HairColor']
			Gender.Value = DecodedFormat['Gender']
			Face.Value = DecodedFormat['Face']
			
			for x,c in pairs(DecodedFormat['Tools']) do
				local var1 = Items:FindFirstChild(c[1])
				if var1 then
					var1:Clone().Parent = Inventory
					
				end
			end			
			
			for x,c in pairs(DecodedFormat[12]) do
				local var1 = Items:FindFirstChild(c)
				if var1 then
					var1:Clone().Parent = Inventory
				end
			end	
			Cash.Value = DecodedFormat[13]	
		end
	end
	Player.CharacterAdded:Connect(function(Character)
		local v1 = ActiveSave.Value
		local v2 = IsInGame.Value
		if v2 then
			local v3 = PlayerData['Save'..v1]
			local v4 = v3['CharacterData']
			local v5 = v4['HasChar'].Value
			local v6 = Character.Humanoid
			if v5 then
				local v7 = v4['SkinColor'].Value
				local v8 = v4['HairType'].Value
				local v9 = v4['HairColor'].Value
				local v10 = v4['Gender'].Value
				local v11 = v4['Face'].Value
				local v12 = v10..v9..v8
				
				local v13 = v3.Race
				if v10 == 'Female' then
					local NewUpperTorso = CharacterPresets.FemaleTemp.UpperTorso:Clone()
					local NewLowerTorso = CharacterPresets.FemaleTemp.LowerTorso:Clone()
					v6:ReplaceBodyPartR15(1,NewUpperTorso)
					v6:ReplaceBodyPartR15(2,NewLowerTorso)
					for i,v in pairs(CharacterSizeAttributes) do
						v6[v].Value = 0.9
					end
				end
				
				
				
				for i,v in pairs(Character:GetDescendants()) do
					if v:IsA('BasePart') then
						PhysicsService:SetPartCollisionGroup(v,'Players')
						v.BrickColor = v7
					end
				end
					
				Character.Head.Face:Destroy()
				local NewFace = CharacterAssets.Faces[v5]:Clone()
				NewFace.Name = 'Face'
				NewFace.Parent = Character.Head
					
				
				for i,v in pairs(CharacterSizeAttributes) do
					v6[v].Value = Character.Humanoid[v].Value * RaceSizeModule[v13][i]
				end
				
				Hairs[v10]:Clone().Parent = Character
			end
		end
	end)
end)
spawn(function()
	while wait(180) do
		for _,Player in pairs(Players:GetPlayers()) do
			if Player:FindFirstChild('PlayerData') then
				for _,v in pairs(Player.PlayerData:GetChildren()) do
					if v:IsA('Folder') then
						local Table = {}
						for _,u in pairs(v:GetChildren()) do
							if u:IsA('Value') then
								Table[u.Name] = u.Value
							elseif u:IsA('Folder') then
								local Table2 = {}
								for _,x in pairs(u:GetChildren()) do
									table.insert(Table2,#Table2+1,{x.Name,x.Data.Value})
								end
								Table[u.Name] = Table2
							end		
							Save = HttpService:JSONEncode(Table)
							local Card = PlayerDataList:GetCard(tostring(Player.UserId..':'..i))
							if not Card then
								Card = TrelloMain.new('Card',Player.UserId..':'..i,PlayerDataList)
							end
							if Save then
								Card:SetProperty('Desc',Save)
							end
					end
										
				end
			end
		end
	end
end)

Players.PlayerRemoving:Connect(function(Player)
	if Player:FindFirstChild('PlayerData') then
		for i = 1,3 do
			local v1 = Player.PlayerData
			local v2 = v1['Save'..i]
			local v3 = v2.Strength.Value
			local v4 = v2.Magic.Value
			local v5 = v2.Spirit.Value
			local v6 = v2.Multiplier.Value
			local v7 = v2.Race.Value
			local v8 = v2.Inventory
			local v9 = v2.CharacterData
			local v10 = v9.HasChar.Value
			local v11 = v9.SkinColor.Value
			local v12 = v9.HairColor.Value
			local v13 = v9.HairType.Value
			local v14 = v9.Gender.Value
			local v15 = v9.Face.Value
			
			local v16 = {}
			for x,c in pairs(v8:GetChildren()) do
				if Tools:FindFirstChild(c.Name) then
					table.insert(v16,#v16+1,tostring(c.Name))
				end
			end
			local Save
			if v10 then
				Save = HttpService:JSONDecode({v3,v4,v5,v6,v7,v16,v11,v12,v13,v14,v15})
			end
			local Card = PlayerDataList:GetCard(tostring(Player.UserId..':'..i))
			if Save then
				if not Card then
					Card = TrelloMain.new('Card',Player.UserId..':'..i,PlayerDataList)
				end
				Card:SetProperty('Desc',Save)
			end
		end
	end
end)
